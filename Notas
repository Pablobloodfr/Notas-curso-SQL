Notas
creacion de base de datos SQL posgres : postgres=# CREATE DATABASE transporte_masivo;

postgres=# \c transporte_masivo

transporte_masivo=# CREATE TABLE viajero (
  id_viajero SERIAL,
  nombre VARCHAR,
  fecha_registro DATE,
  CONSTRAINT pk_pasajero PRIMARY KEY (id_viajero)
);

transporte_masivo=# CREATE INDEX idx_pasajero_fechacreacion ON viajero (fecha_registro);

para crear tablaa seguir los pasos en el texto 


## con "\h" logramos evidenciar todos los puntos comandos a utilizar para sql
__________________________________________________________________________________________


\c Saltar entre bases de datos

\l Listar base de datos disponibles

\dt Listar las tablas de la base de datos

\d <nombre_tabla> Describir una tabla

\dn Listar los esquemas de la base de datos actual

\df Listar las funciones disponibles de la base de datos actual

\dv Listar las vistas de la base de datos actual

\du Listar los usuarios y sus roles de la base de datos actual

Comandos de inspección y ejecución

\g Volver a ejecutar el comando ejecutando justo antes

\s Ver el historial de comandos ejecutados

\s <nombre_archivo> Si se quiere guardar la lista de comandos ejecutados en un archivo de texto plano

\i <nombre_archivo> Ejecutar los comandos desde un archivo

\e Permite abrir un editor de texto plano, escribir comandos y ejecutar en lote. \e abre el editor de texto, escribir allí todos los comandos, luego guardar los cambios y cerrar, al cerrar se ejecutarán todos los comandos guardados.

\ef Equivalente al comando anterior pero permite editar también funciones en PostgreSQL

Comandos para debug y optimización

\timing Activar / Desactivar el contador de tiempo por consulta
Comandos para cerrar la consola

\q Cerrar la consola
Ejecutando consultas en la base de datos usando la consola

De manera predeterminada PostgreSQL no crea bases de datos para usar, debemos crear nuestra base de datos para empezar a trabajar, verás que existe ya una base de datos llamada postgres pero no debe ser usada ya que hace parte del CORE de PostgreSQL y sirve para gestionar las demás bases de datos.

Para crear una base de datos debes ejecutar la consulta de creación de base de datos, es importante entender que existe una costumbre no oficial al momento de escribir consultas; consiste en poner en mayúsculas todas las palabras propias del lenguaje SQL cómo CREATE, SELECT, ALTE, etc y el resto de palabras como los nombres de las tablas, columnas, nombres de usuarios, etc en minúscula. No está claro el porqué de esta especie de “estándar” al escribir consultas SQL pero todo apunta a que en el momento que SQL nace, no existían editores de consultas que resaltaran las palabras propias del lenguaje para diferenciar fácilmente de las palabras que no son parte del lenguaje, por eso el uso de mayúsculas y minúsculas.

Las palabras reservadas de consultas SQL usualmente se escriben en mayúscula, ésto para distinguir entre nombres de objetos y lenguaje SQL propio, no es obligatorio, pero podría serte útil en la creación de Scripts SQL largos.

Vamos ahora por un ligero ejemplo desde la creación de una base de datos, la creación de una tabla, la inserción, borrado, consulta y alteración de datos de la tabla.

Primero crea la base de datos, “CREATE DATABASE transporte;” sería el primer paso.

4.png
Ahora saltar de la base de datos postgres que ha sido seleccionada de manera predeterminada a la base de datos transporte recién creada utilizando el comando \c transporte.

5.png
Ahora vamos a crear la tabla tren, el SQL correspondiente sería:

CREATE TABLE tren ( id serial NOT NULL, modelo character varying, capacidad integer, CONSTRAINT tren_pkey PRIMARY KEY (id) );

La columna id será un número autoincremental (cada vez que se inserta un registro se aumenta en uno), modelo se refiere a una referencia al tren, capacidad sería la cantidad de pasajeros que puede transportar y al final agregamos la llave primaria que será id.

6.png
Ahora que la tabla ha sido creada, podemos ver su definición utilizando el comando \d tren

7.png
PostgreSQL ha creado el campo id automáticamente cómo integer con una asociación predeterminada a una secuencia llamada ‘tren_id_seq’. De manera que cada vez que se inserte un valor, id tomará el siguiente valor de la secuencia, vamos a ver la definición de la secuencia. Para ello, \d tren_id_seq es suficiente:

8.png
Vemos que la secuencia inicia en uno, así que nuestra primera inserción de datos dejará a la columna id con valor uno.

INSERT INTO tren( modelo, capacidad ) VALUES (‘Volvo 1’, 100);

9.png
Consultamos ahora los datos en la tabla:

SELECT * FROM tren;

10.png
Vamos a modificar el valor, establecer el tren con id uno que sea modelo Honda 0726. Para ello ejecutamos la consulta tipo UPDATE tren SET modelo = 'Honda 0726' Where id = 1;

11.png
Verificamos la modificación SELECT * FROM tren;

12.png
Ahora borramos la fila: DELETE FROM tren WHERE id = 1;

13.png
Verificamos el borrado SELECT * FROM tren;

14.png
El borrado ha funcionado tenemos 0 rows, es decir, no hay filas. Ahora activemos la herramienta que nos permite medir el tiempo que tarda una consulta \timing

15.png
Probemos cómo funciona al medición realizando la encriptación de un texto cualquiera usando el algoritmo md5:

16.png
La consulta tardó 10.011 milisegundos

Ahora que sabes como manejar algunos de los comandos más utilizados en PostgreSQL es momento de comenzar a practicar!!!

_____________________________________________________________________________________________


principales textos : 


numericos 
monetarios 
texto 
binarios 
fecha / hora 
boolean 

LOS ESPECIALES 

Geometricos 
Direccion de red 
Texto bit 
XML, JSON 
Arreglos
__________________________________________________________________________________________
ACCIONES 

create = crear todas las tablas 
ALTER = para realizar todas sus modificaciones , de indicises y diferentes columnas 
DROP = es para borrar todo el sistema y modificacion de las diferentes tablas , pero mas que todo para borrarlas 




CREATE TABLE public.trayecto (id serial not NULL,id_estacion integer not NULL,id_tren integer not null,name varchar null,constraint trayecto_pk primary key (id),constraint estacion_fk foreign key (id_estacion) references public.estacion,
	id serial not NULL,
	id_estacion integer not NULL,
	id_tren integer not null,
	name varchar null,
	constraint trayecto_pk primary key (id),
	constraint estacion_fk foreign key (id_estacion) references public.estacion,
	constraint tren_fk foreign key (id_tren) references public.tren
);

____________________________________________________________________________________________

CREAR USUARIO PARA ACCESO A LA TABLAS 

** CREATE ROLE user_acceso**

PARA REVISAR 
